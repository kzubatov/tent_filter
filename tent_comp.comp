#version 450

layout(constant_id = 0) const int WORK_GROUP_AXIS_SIZE = 16;
layout(constant_id = 1) const int WINDOW_R = 1;

layout(local_size_x_id = 0, local_size_y_id = 0, local_size_z = 1) in;

layout(push_constant) uniform params_T {
    ivec2 resolution;
    float k;
    float b;
} params;

layout(binding = 0) uniform sampler2D srcImage;
layout(binding = 1, rgba8) uniform writeonly image2D dstImage;

const int WINDOW_LEN = WORK_GROUP_AXIS_SIZE + 2 * WINDOW_R;
shared vec3 window[WINDOW_LEN][WINDOW_LEN];

// kernel_sum = n * (n * k - b * (n * n - 1) / 2)
// kernel[i, j] = k - b(|x| + |y|)

void main() {
    int row = int(gl_LocalInvocationIndex / WINDOW_LEN);
    int col = int(gl_LocalInvocationIndex % WINDOW_LEN);
    ivec2 coord = ivec2(gl_WorkGroupID.xy) * WORK_GROUP_AXIS_SIZE + ivec2(col - WINDOW_R, row - WINDOW_R);
    window[row][col] = textureLod(srcImage, (coord + 0.5) / params.resolution, 0).rgb;

    int idx = int(gl_LocalInvocationIndex + WORK_GROUP_AXIS_SIZE * WORK_GROUP_AXIS_SIZE);
    if (idx < WINDOW_LEN * WINDOW_LEN)
    {
        row = idx / WINDOW_LEN;
        col = idx % WINDOW_LEN;
        coord = ivec2(gl_WorkGroupID.xy) * WORK_GROUP_AXIS_SIZE + ivec2(col - WINDOW_R, row - WINDOW_R);
        window[row][col] = textureLod(srcImage, (coord + 0.5) / params.resolution, 0).rgb;
    }

    barrier();

    if (all(lessThan(ivec2(gl_GlobalInvocationID.xy), params.resolution)))
    {
        vec3 result = vec3(0);
        float kernel_sum = 0;
        ivec2 coord = ivec2(gl_LocalInvocationID.xy) + WINDOW_R;

        for (int i = -WINDOW_R; i <= WINDOW_R; ++i)
        {
            for (int j = -WINDOW_R; j <= WINDOW_R; ++j)
            {
                float tmp = params.k - params.b * (abs(i) + abs(j));
                result += tmp * window[coord.y + i][coord.x + j];
                kernel_sum += tmp;
            }
        }

        imageStore(dstImage, ivec2(gl_GlobalInvocationID.xy), vec4(result / kernel_sum, 1.0));
    }
}